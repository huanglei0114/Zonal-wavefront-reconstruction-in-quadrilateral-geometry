% Integrate Slopes in Quadrilateral Geometry.
% Study on the noise influence.

%% Clear everything.

close all
clear
clc

%% Load analytical height and slopes.

load Step_01_GenerateSlopesInQuadrilateralGeometry.mat ...
    x y sx_anal sy_anal z_anal

% Add normally distributed random errors to analytical slopes.
STDs_slope_error = 0e-3:1e-3:20e-3; % [rad]
RMSs_ez = zeros(9,length(STDs_slope_error));
for STD_slope_error = STDs_slope_error
    
    sx = sx_anal + randn(size(sx_anal))*STD_slope_error;
    sy = sy_anal + randn(size(sy_anal))*STD_slope_error;
    
    % Reconstruct height from slopes.......................................
    z_tfli2 = tfli2(sx, sy, x, y);
    z_tfli2i = tfli2i(sx, sy, x, y);
    z_tfli2q = tfli2q(sx, sy, x, y);
    
    z_hfli2 = hfli2(sx, sy, x, y);
    z_hfli2i = hfli2i(sx, sy, x, y);
    z_hfli2q = hfli2q(sx, sy, x, y);
    
    z_sli2 = sli2(sx, sy, x, y);
    z_sli2i = sli2i(sx, sy, x, y);
    z_sli2q = sli2q(sx, sy, x, y);
    
    % Checking the error for reconstruction................................
    [ez_tfli2, rms_ez_tfli2] = EvaluateError(z_tfli2, z_anal);
    [ez_tfli2i, rms_ez_tfli2i] = EvaluateError(z_tfli2i, z_anal);
    [ez_tfli2q, rms_ez_tfli2q] = EvaluateError(z_tfli2q, z_anal);
    
    [ez_hfli2, rms_ez_hfli2] = EvaluateError(z_hfli2, z_anal);
    [ez_hfli2i, rms_ez_hfli2i] = EvaluateError(z_hfli2i, z_anal);
    [ez_hfli2q, rms_ez_hfli2q] = EvaluateError(z_hfli2q, z_anal);
    
    [ez_sli2, rms_ez_sli2] = EvaluateError(z_sli2, z_anal);
    [ez_sli2i, rms_ez_sli2i] = EvaluateError(z_sli2i, z_anal);
    [ez_sli2q, rms_ez_sli2q] = EvaluateError(z_sli2q, z_anal);
    
    ez = [ez_tfli2, ez_tfli2i, ez_tfli2q;
        ez_hfli2, ez_hfli2i, ez_hfli2q;
        ez_sli2, ez_sli2i, ez_sli2q];
    
    rms_ez = [rms_ez_tfli2, rms_ez_tfli2i, rms_ez_tfli2q;
        rms_ez_hfli2, rms_ez_hfli2i, rms_ez_hfli2q;
        rms_ez_sli2, rms_ez_sli2i, rms_ez_sli2q];
    
    disp('rms_ez = ');
    disp(rms_ez);
    
    RMSs_ez(:,STDs_slope_error == STD_slope_error) = rms_ez(:);
end


%% Figures for reconstruction error.

FontSize = 20;
LineWidth = 2;
MarkerSize = 10;
Colors = lines(7);


% Plot the figure..........................................................

figure('position',[100, 100, 900, 700]); 
semilogy(STDs_slope_error*1e3, RMSs_ez(1,:), 's:' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(1,:) ...
    )
hold on;
semilogy(STDs_slope_error*1e3, RMSs_ez(2,:), 'd:' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(2,:) ...
    )
semilogy(STDs_slope_error*1e3, RMSs_ez(3,:), 'o:' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(3,:) ...
    )
semilogy(STDs_slope_error*1e3, RMSs_ez(4,:), 's-.' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(1,:) ...
    )
semilogy(STDs_slope_error*1e3, RMSs_ez(5,:), 'd-.' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(2,:) ...
    )
semilogy(STDs_slope_error*1e3, RMSs_ez(6,:), 'o-.' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(3,:) ...
    )
semilogy(STDs_slope_error*1e3, RMSs_ez(7,:), 's-' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(1,:) ...
    )
semilogy(STDs_slope_error*1e3, RMSs_ez(8,:), 'd-' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(2,:) ...
    )
semilogy(STDs_slope_error*1e3, RMSs_ez(9,:), 'o-' ...
    , 'LineWidth', LineWidth ...
    , 'MarkerSize', MarkerSize ...
    , 'Color', Colors(3,:) ...
    )
xlabel('slope noise [mrad]');
ylabel('RMSE [mm]');
set(gca,'FontSize',FontSize,'FontWeight','Bold')
legend( ...
    'TFLI' , ...
    'HFLI' , ...
    'SLI' , ...
    'TFLIi' , ...
    'HFLIi' , ...
    'SLIi' , ...
    'TFLIq' , ...
    'HFLIq' , ...
    'SLIq' , ...
    'Location', 'Best')
